#
# 20551410
# Jason Nguyen
#

Each function of each category will get it's own class where they the scripts are called from and used by a main file. The main file will be used to run the code, however it will not contain a large majority of the code. All the code for each function will be self contained and shouldn't need to rely on other files, however there may still be a possibility that is overlooked. 

Each function will ask the user whether or not they'd like to input data in the form of a string through their keyboard or through the reading of a data file. Each data file will need to have the correct formatting which the program will list out for the user. Failure to comply to these standards may affect how the program operates. 

Each "function" from each category will have many "sub-modules" in which it calls upon; these are just methods. Each method will run a dedicated functionality to avoid poor coherancy.

The programs will run in looped systems which will require the user to manual exit the program through entering the correct menu options when displayed. The program should not break under most circumstances, unless purposely close by the user; i.e, through CTRL + C or exit through the menus.

Variables aren't chosen now as during programming, appropriate variable names will be chosen on the spot incase design or functionality of the program is slightly alter from the self-imposed guidelines set below.

Below is a basic description of what the program will do:
Category 1:
a. Converting a given string to upper case or lower case.
	> Ask user to enter in any string they wish to use.
	> Afterwards ask them to confirm, in a try, while loop.
		- If NO then re-enter their string
		- If YES continue with program
	> Ask if they'd like to convert to upper case or lower case
		- If UPPERCASE then run Uppercase sub-module
		- If LOWERCASE then run Lowercase sub-module
	> Each sub-module uses java.text's toLowerCase() or toUpperCase() respectively.
	> Afterwards print the string to the user and end the program.

b. Identify whether numeric values are in a given string.
	> Ask user to enter in any string they wish to use.
	> Afterwards ask them to confirm, in a try, while loop.
		- If NO then re-enter their string
		- If YES continue with program
	> Afterwards convert the string into a char array.
	> Loop through this char array check if the char is a digit using isDigit().
	> And if so print out that a number was found in the string.

c. Identify whether a given string is a valid number or not.
	> Ask user to enter in any string they'd like to use.
	> Afterward confirm if they'd like to continue with their string.
	> Afterwards in a while true loop, run a try catch.
	> Attempt to convert the number into a double.
		- If it can, set running loop to false and print out the value.
		- If it cannot, and errors occur, set running loop to false and print out that the number wasn't valid.
	> Additional code for converting numbers in the form of words can be added if there is time.
	
d. Remove any numeric values in a give string and then convert the string to upper case of lower case.
	> Ask the user to enter in a string.
	> Confirm if they'd like to continue.
	> Convert the string to a char array.
	> Loop through this char array and check if the char is a digit using isDigit().
	> Only when it isn't, set a string to the string + the current char.
	> Print out the string and end the program.

Category 2:
c. Convert a number which represents a time given in hours to minutes and vice versa, and time given in minutes to seconds and vice versa.
	> Ask the user which unit they would like convert from; Hours, Minutes, Seconds.
	> Run a case, where if the answer was:
		- Hours, they are then asked to enter hours.
		- Minutes, they are asked to enter minutes.
		- Seconds, they are asked to enter seconds.
		- Anything else, program tells the user the option wasn't valid and retries.
	> Afterwards it'll ask the user which unit they'd like to go to.
		- If Seconds, they choose Minutes or Hours, and run a sub-module called toMinutes or toHours, passing the values they choose and the a char for the unit they are coming from.
		- If Minutes, they choose Seconds or Hours, and run a sub-module called toSeconds or toHours, passing values.
		- If Hours, they choose Seconds or Minutes, and then run a sub-module called toSeconds or toMinutes, passing values.
	> After they've choose then the unit they wish to go to, the program will run the respective sub-module.
	> Sub-module determines which conversion to use from the char that represents which unit they are coming from.
	> Afterwards, they take the units and convert them to the unit they user wants.
	> Then print out the result to the user.


