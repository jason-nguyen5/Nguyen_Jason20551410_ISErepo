#
# 20551410
# Jason Nguyen
#

Each function of each category will get it's own class where they the scripts are called from and used by a main file. The main file will be used to run the code, however it will not contain a large majority of the code. All the code for each function will be self contained and shouldn't need to rely on other files, however there may still be a possibility that is overlooked. 

Each function will ask the user whether or not they'd like to input data in the form of a string through their keyboard or through the reading of a data file. Each data file will need to have the correct formatting which the program will list out for the user. Failure to comply to these standards may affect how the program operates. 

Each "function" from each category will have many "sub-modules" in which it calls upon; these are just methods. Each method will run a dedicated functionality to avoid poor coherency.

The programs will run in looped systems which will require the user to manual exit the program through entering the correct menu options when displayed. The program should not break under most circumstances, unless purposely close by the user; i.e, through CTRL + C or exit through the menus.

Variables aren't chosen now as during programming, appropriate variable names will be chosen on the spot incase design or functionality of the program is slightly alter from the self-imposed guidelines set below.

Below is a basic description of what the program will do:
Category 1:
a. Converting a given string to upper case or lower case.
	> Ask user to enter in any string they wish to use.
	> Afterwards ask them to confirm, in a try, while loop.
		- If NO then re-enter their string
		- If YES continue with program
	> Ask if they'd like to convert to upper case or lower case
		- If UPPERCASE then run Uppercase sub-module
		- If LOWERCASE then run Lowercase sub-module
	> Each sub-module uses java.text's toLowerCase() or toUpperCase() respectively.
	> Afterwards print the string to the user and end the program.

b. Identify whether numeric values are in a given string.
	> Ask user to enter in any string they wish to use.
	> Afterwards ask them to confirm, in a try, while loop.
		- If NO then re-enter their string
		- If YES continue with program
	> Afterwards convert the string into a char array.
	> Loop through this char array check if the char is a digit using isDigit().
	> And if so print out that a number was found in the string.

c. Identify whether a given string is a valid number or not.
	> Ask user to enter in any string they'd like to use.
	> Afterward confirm if they'd like to continue with their string.
	> Afterwards in a while true loop, run a try catch.
	> Attempt to convert the number into a double.
		- If it can, set running loop to false and print out the value.
		- If it cannot, and errors occur, set running loop to false and print out that the number wasn't valid.
	> Additional code for converting numbers in the form of words can be added if there is time.
	
d. Remove any numeric values in a give string and then convert the string to upper case or lower case.
	> Ask the user to enter in a string.
	> Confirm if they'd like to continue.
	> Convert the string to a char array.
	> Loop through this char array and check if the char is a digit using isDigit().
	> Only when it isn't, set a string to the string + the current char.
	> Print out the string and end the program.

Category 2:
c. Convert a number which represents a time given in hours to minutes and vice versa, and time given in minutes to seconds and vice versa.
	> Ask the user which unit they would like convert from; Hours, Minutes, Seconds.
	> Run a case, where if the answer was:
		- Hours, they are then asked to enter hours.
		- Minutes, they are asked to enter minutes.
		- Seconds, they are asked to enter seconds.
		- Anything else, program tells the user the option wasn't valid and retries.
	> Afterwards it'll ask the user which unit they'd like to go to.
		- If Seconds, they choose Minutes or Hours, and run a sub-module called toMinutes or toHours, passing the values they choose and the a char for the unit they are coming from.
		- If Minutes, they choose Seconds or Hours, and run a sub-module called toSeconds or toHours, passing values.
		- If Hours, they choose Seconds or Minutes, and then run a sub-module called toSeconds or toMinutes, passing values.
	> After they've choose then the unit they wish to go to, the program will run the respective sub-module.
	> Sub-module determines which conversion to use from the char that represents which unit they are coming from.
	> Afterwards, they take the units and convert them to the unit they user wants.
	> Then print out the result to the user.

- - - - - - - - - - -- - - - - - - - - - - - - - - - -

After discovering that the use of certain java functions is not permitted for use in this assignment, I have now decided to change my approach to the entire program and how I intend to program it. I will still stick to the main premises of what I have already laid out however, I will be readjusting to better suit the requirements of the assignment.

For my revision of the program, I will have a main menu class that calls upon each function for the calculations from a separate class file. However, I intend to do most of the processing and setting up in the main file, such as converting strings to arrays and so on. The separate class file will only be for assignment specific functions, I.e. converting char arrays to uppercase. In doing the process this way I can, when I perform my test cases, I do not need to call a bunch of functions, but rather all I need to do is call the super specific function to run.

Before, my program would have had a lot of repeated code and thus would have greatly heightened the risk of creating data redundancies. Now, I will create a more generic methods that can reused for multiple functions.

Below is how my new code will run:
- Menu:
	> (inputTypeMenu Function) Ask the user if they'd like to manually write in data using their keyboard or read the data from a file instead. This'll be ran in a loop to avoid an incorrect choice from crashing the program or causing it to end prematurely.
		- If the user wishes to read from a file, the program will open another menu and then ask them to type the path to the file including the file extension.
			>>> Afterwards the name of this file will be saved as a string and then passed into a read file function that'll read the lines and convert each line in an array, and then each array will be added to list to be called from.
		- If the user wishes to manually type in the string, they will prompted to type in their string and afterwards, it will be converted into a char array which will be added to a list to be called from.
		- If the user wishes to exit the program, they can select the option and it will just a variable that runs the loop to false, causing the loop to end.
	> After data has be registered into the list, there will be a second menu asking the user to choose with function they'd like to call upon.
	> The user will choose from the these functions that will have the code for them in a separate file most likely called Functions.java
	> When a function is chosen the Main program will call the Functions class and the method required while passing in the list of strings.
		- These functions will run in a for loop, that loop for the duration of the size of the list so that it can run for automatic in cases where that option was chosen.
	> This returned data will then be saved into an output string to where the program can the print the output to display to the user.
	> These saved strings will also be written to a file and be outputted after the loop has ended.

	> There is a method called "stringInputAndConfirm" which will run to confirm if the input the user entered was correct.
		> Runs a loop called "runningStringConfirm".
			> Print out asking the user if the string they entered was correct and then they can select yes or no.
				- If they choose no then the loop will loop.
				- Otherwise the loop will end. 
		> After the loop ends, the method will return the input string.

	> There is a method called "runStringToCharArray" that will convert a string to an array of chars.
		> The method takes in the string and then creates a "charArray" that is the length of the string.
			> Afterward it runs a for loop, that loops for the duration of i until i equals the length of the string.
			> Within this loop the program set the i'th element of the char array to the char at i for the stringInput.
		> Afterwards it returns the charArray. 

	> This is a method called "runManualInput" that will get the input of the user and assign it to a list.
		> It runs "stringInputAndConfirm", passing in "Please enter the string you wish to convert: ".
		> And then takes the returned value as "stringInput".
		> "stringInput" is then added to a list.
		> And then it is returns this list, "returnList".

	> This is a method called "runAutomaticInput" that will get the input of the user and then access the text file and save each line a list.
		> This function runs "stringInputAndConfirm", passing in "Please enter the path to the file, including the extension: ".
		> Afterwards, the output is assigned to "stringInput".
		> The "stringInput" is then passed into a function called "readFile".
		> The retunr output is then set to "returnList" and then returned.

	> "readFile" is a function that takes an input string, then read every line from that file and then return the lines in a list.
		> Try to open a new file stream and load them into a buffer.
		> Read the buffer.
		> Run a while loop that runs while the line isn't null.
			> Run "runStringToCharArray" passing in the read line and save it to a "tempArray".
			> Add the "tempArray" to the "returnList".
			> Read the next line.
		> Catch any errors.
		> Return the list.

- Functions:
	> There will be a method called "charArrayToAsciiArray", which will convert a char array into an ascii array.
		> This method takes in an array, and then it will loop through all the elements of the array and type cast them to an integer.
		> During this loop, it'll set the current element of a "returnArray" to the currently type casted value.
		> Method then returns the "returnArray"

	> There will be a method called "asciiArrayToString", which will convert an array of ascii values into a string.
		> This method cycles through the array and set a returnString to returnString + the typecasted value of element I.

	> There will be a method called "writeOneRow", which will save a string to a given file.
		> It'll run code taken from COMP1007 Lecture 7.
		> It'll take in a inFileName, and a stringToWrite and write the string into a file.
		> And catch any errors and print an error message.

	> Create a method called "askWhichCaseMenu" that will ask and return the case that the user chooses
		> Run a while loop that'll ask for the case they user would like to convert to.
			> Print out asking the user if they'd like to conver to uppercase or lowercase.
			> Read and check if the input was "u" or "l".
				- If it is "u", set "wantUpper" to true and stop the loop.
				- Else, it'll set "wantUpper" to false and stop the loop.
		> Return the "wantUpper" value.  
	
	> There will be a method called "a_ConvertCases", which will be used for converting strings from lower case and upper case.
		> This method will run a menu loop that asks the user to choose between converting to uppercase and lowercase (askWhichCaseMenu).
		> Afterwards the program will run a for loop that will get the i'th element of the list, and set that as a temp array.
		> This array will then passed into "charArrayToAsciiArray" to which it'll then be set to the temp array again.
		> This temp array will then be passed into a function called "arrayToUpper" or "arrayToLower" depending on the option chosen by the user.
			> The program will check if the int is within the range of being either lowercase or uppercase and convert them to the right case by adding or subtracting 32 for each respective cases.
			> It'll loop through the entire array and set the current element of the passed array.
			> Then it'll run asciiArrayToString method and set the output to "returnString"
			> Afterwards it'll return this string.
		> The returned value will then be saved into a "convertedString" variable.
		> And the program will print both the original and "convertedString" variable out to the user and save it into a next row of a new file.
		> The program will then loop through and then afterwards end itself and save that new file.
	
	> "arrayToUpper" will take in the int array and convert them to uppercase int values.
		> Run a for loop that'll run for the length of the input array.
		> Check if the current value of "inputArray" is <123 and >96.
			- If it was within the range, the current value of "returnArray" is set to "inputArray" - 32.
			- Else, the current value of "returnArray" is set to "inputArray".
		> Afterward, it'll return the "returnArray".

	> "arrayToLower" will take in the int array and convert them to lowercase int values.
		> Run a for loop that'll run for the length of the input array.
		> Check if the current value of "inputArray" is <91 and >64.
			- If it was within the range, the current value of "returnArray" is set to "inputArray" + 32.
			- Else, the current value of "returnArray" is set to "inputArray".
		> Afterward, it'll return the "returnArray".

	> There will be a method called "b_DoNumericsExist", which will be used for checking if a numeric value exist in a string.
		> This method will run loop that runs through the passed list and set the current element of the list to a temp array.
		> This temp array is then going to be passed into another method called "checkNumericsExist"
			> "checkNumericsExist" will return a true or false value.
			> It takes the array and cycles through it, checking if there is a value in the array that is between 48 and 57 inclusive.
			> If it finds a match it'll set a variable called "numericsExistInString" to true.
			> Then the function will return "numericsExistInString".
		> Based on the returned value the function will print out whether or not a numeric value existed within the provided string.
		> Write the result to a text file, using "writeOneRow"

	> "checkNumericsExist" is a method that'll check if the a number exist within an array.
		> Set "booleanToReturn" to false.
		> Run a for loop that run for the length of the "inputArray".
		> Check if the current value of the "inputArray" is <= 57 and >= 48.
			- If so, "booleanToReturn" will be set to true.
		> Return the "booleanToReturn".

	> A method called "c_StringIsValidNumber" will be used to check if a provided string is a number or not.
		> The program will run a for loop that will get the i'th element of the list, and set that as a temp array.
		> Afterwards, inside this loop the temp array is passed into a function called charArrayToAsciiArray to convert the char array to an ascii array.
		> This array is then sent to "arrayToNumbers" and set 0'th element of the return value to a string variable.
		> Afterwards, the program will set "stringToPrint" to "\nThe string: " + asciiArrayToString(asciiArray) + returnedList.get(0)
		> And then save the output string to a text file using "writeOneRow".

	> A method called "arrayToNumbers", will return a list of strings: validity, string without numbers, number only string
		> Run a for loop based on the length of the array.
			> Inside this loop it'll set "inputArray" to the i'th element.
				- If inputArray is between 48 and 57 inclusive, it'll set outputString to outputString + the typecasted number
				- Else, it'll set invalidString to true, and set "nonNumberString" to the "nonNumberString" + the value of the current element.
			> If the "outputString" is null, then set the "outputString" to "0".
			> At the end it'll check if invalidString is true.
				- If so, it'll add "was an invalid number.", "nonNumberString" and "outputString" to returnList. 
				- Otherwise it'll add " was the valid number: ", "nonNumberString" and "outputString" to returnList. 
			> Then it returns the returnList.

	> A method called "d_RemoveNumericsAndConvertCase", will take a number and remove the numbers, along with converting the case of the string.
		>> This method will run a menu loop that asks the user to choose between converting to uppercase and lowercase. (askWhichCaseMenu)
		>> Afterwards the program will run a loop that'll get the i'th element of the list, and set that as a temp array.
		>> This array will then passed into "charArrayToAsciiArray" to which it'll then be set to the temp array again.
		>> This array is then sent to "arrayToNumbers" and set 1st element of the return value to an array.
		> Convert the string to a char array using "runStringToCharArray" from Menu.java.
		> Covert this char array to an ascii array using "charArrayToAsciiArray"
		> A new variable called "convertedAsciiArray" is then sent to "arrayToUpper" or "arrayToLower" based on the user's input.
		> The returned value will then be saved into a "convertedString" variable after being passed through "asciiArrayToString". 
		> And printed out to the user and saved using "writeOneRow".

	> There will be a method called "twoC_TimeConversion", that will be used to convert a number from second, minutes, or hours to hours, minutes, or seconds
		> The program will run a new menu function called "whichTimeConversions" and set it to "convertFrom" and "convertTo" variables.
		> Then run a for loop, the duration of the list size.
		> The charArray will be set to the i'th value in the list.
		> Then char array to ascii array using "charArrayToAscii".
		> Then passed to "arrayToNumbers", and setting element 2 of the returned list to "timeNumber".
		> Afterwards, there will run a switch case that'll check the "convertFrom" value against 'h', 'm', 's'.
		> Afterwards, in each case it'll run an if statement that'll check if the convertTo equals 'h', 'm', 's' and perform the multiplication.
		> During the multiplication, it'll as get the module values and set the respective units to the remainder.
		> After the convertedHour, convertedMinute, convertedSecond are all set, it'll exit the case.
		> At the end it'll print out a string that states how much the original string is in x units.
		> And then write to a file using "writeOneRow".


	> "whichTimeConversions" function that'll ask which unit they'd like to select.
		> Run a menu loop that asks the user which unit they'd like to convert from.
		> Print out the options the user can choose from.
		> Set the input to the next string.
		> Use a switch case to compare the string.
			- If the string = "h" set the "returnChar" to 'h'.
			- If the string = "m" set the "returnChar" to 'm'.
			- If the string = "s" set the "returnChar" to 'c'.
			- Otherwise tell the user the input was invalid
		> Return the "returnChar".
	
	> "getFromUnit" will get the char and convert to the full name of unit.
		> Check the convertFrom that is passed in.
			- If it equals 'h', then set the "returnString" to " Hours"
			- If it equals 'h', then set the "returnString" to " Minutes"
			- Else, set "returnString" to " Seconds".
		> Return the "returnString".