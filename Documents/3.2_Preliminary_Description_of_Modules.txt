#
# 20551410
# Jason Nguyen
#

Category 1:
a. Converting a given string to upper case or lower case.
	> Ask user to enter in any string they wish to use.
	> Afterwards ask them to confirm, in a try, while loop.
		- If NO then re-enter their string
		- If YES continue with program
	> Ask if they'd like to convert to upper case or lower case
		- If UPPERCASE then run Uppercase sub-module
		- If LOWERCASE tehn run Lowercase sub-module
	> Each sub-module uses java.text's toLowerCase() or toUpperCase() respectively.
	> Afterwards print the string to the user and end the program.

b. Identify whether numeric values are in a given string.
	> Ask user to enter in any string they wish to use.
	> Afterwards ask them to confirm, in a try, while loop.
		- If NO then re-enter their string
		- If YES continue with program
	> Afterwards convert the string into a char array.
	> Loop through this char array check if the char is a digit using isDigit().
	> And if so print out that a number was found in the string.

c. Identify whether a given string is a valid number or not.
	> Ask user to enter in any string they'd like to use.
	> Afterward confirm if they'd like to continute with their string.
	> Afterwards in a while true loop, run a try catch.
	> Attempt to convert the number into a double.
		- If it can, set running loop to false and print out the value.
		- If it cannot, and errors occur, set running loop to false and print out that the number wasn't valid.
	> Additional code for converting numbers in the form of words can be added if there is time.
	
d. Remove any numeric values in a give string and then convert the string to upper case of lower case.
	> Ask the user to enter in a string.
	> Confirm if they'd like to continue.
	> Convert the string to a char array.
	> Loop throuhg this char array and check if the char is a digit using isDigit().
	> Only when it isn't, set a string to the string + the current char.
	> Print out the string and end the program.

Category 2:
c. Convert a number which represents a time given in hours to minutes and vice cersa, and time given in minutes to seconds and vice versa.
	> Ask the user which unit they would like convert from; Hours, Minutes, Seconds.
	> Run a case, where if the answer was:
		- Hours, they are then asked to enter hours.
		- Minutes, they are asked to enter minutes.
		- Seconds, they are asked to enter seconds.
		- Anything else, program tells the user the option wasn't valid and retries.
	> Afterwards it'll ask the user which unit they'd like to go to.
		- If Seconds, they choose Minutes or Hours, and run a sub-module called toMinutes or toHours, passing the values they choosen and the a char for the unit they are coming from.
		- If Mintues, they choose Seconds or Hours, and run a sub-module called toSeconds or toHours, passing values.
		- If Hours, they choose Seconds or Minutes, and then run a sub-module called toSeconds or toMinutes, passing values.
	> After they've choose then the unit they wish to go to, the program will run the respective sub-module.
	> Sub-module determines which conversion to use from the char that represents which unit they are coming from.
	> Afterwards, they take the units and convert them to the unit they user wants.
	> Then print out the result to the user.
